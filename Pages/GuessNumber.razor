@page "/guess-number"
@using System.Timers
@inject IJSRuntime JSRuntime

<style>
    .centered-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        max-width: 600px;
        margin: auto;
        padding: 20px;
        background-color: #1c1c1e;
        border-radius: 15px;
    }

    .play-button {
        cursor: pointer;
        padding: 10px 20px;
        border-radius: 10px;
        font-weight: 600;
        background-color: #007bff;
        color: #fff;
        transition: background-color 0.3s;
        font-size: 1.25rem;
    }

    .play-button:hover {
        background-color: #1e90ff;
    }

    .form-select {
        width: 100%;
        background-color: #343a40;
        color: #fff;
        border: 1px solid #007bff;
        border-radius: 5px;
        transition: background-color 0.3s;
        font-size: 1rem;
        padding: 0.5rem;
    }

    .form-select:hover, .form-select:focus {
        background-color: #007bff;
        color: #fff;
    }

    .input {
        border: 2px solid #ced4da;
        background: #fff;
        outline: none;
        padding: 0.5rem;
        transition: border-color 0.2s, box-shadow 0.2s;
        color: #495057;
        font-size: 1rem;
        width: 100%;
        margin-bottom: 1rem;
    }

    .input:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .text-info {
        font-weight: bold;
        animation: blink 1s infinite;
    }

    @@keyframes blink {
    0%, 100% {
        opacity: 1;
    }
    50% {
        opacity: 0.5;
    }
    }

    .alert {
        margin-top: 1rem;
        font-size: 1rem;
        border-radius: 5px;
        width: 100%;
    }

    .alert-danger, .alert-success, .alert-primary, .alert-warning {
        border: 1px solid transparent;
    }
</style>

<div class="centered-container">
    <h3 class="text-center text-light text-uppercase fw-bold mb-4">Jogo de Adivinhação de Números</h3>

    <div class="text-center mb-3 w-100">
        <label for="difficulty" class="form-label text-light text-uppercase">Dificuldade:</label>
        <select id="difficulty" @onchange="ChangeDifficultLevel" class="form-select custom-select text-uppercase">
            @foreach (Level item in Enum.GetValues(typeof(Level)))
            {
                <option value="@item">@item.ToString().Replace("_", " ")</option>
            }
        </select>
    </div>

    <p class="text-center text-light mt-2">Máximo de tentativas: <span class="text-info">@maxAttempts</span></p>

    <div class="main mb-3 w-100">
        <input @bind="userGuess" required type="number" class="input form-control" min="1" max="100" title="Palpite">
    </div>

    <button class="play-button w-100 mb-3" @onclick="MakeGuess"><i class="fas fa-paper-plane"></i> Enviar Palpite</button>

    <p class="text-center text-light">Tentativas usadas: <span class="text-info">@attempts</span></p>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @GetAlertClass(message)">
            @message
        </div>
    }
</div>

@code {
    private int chosenNumber;
    private int attempts;
    private int maxAttempts = 12;
    private int userGuess = 1;
    private string message = string.Empty;
    private Level _level;

    protected override void OnInitialized()
    {
        StartNewGame();
    }

    private void StartNewGame()
    {
        var random = new Random();
        chosenNumber = random.Next(1, 101);
        attempts = 0;
        userGuess = 0;
        Console.WriteLine(chosenNumber);
        message = "Tente adivinhar o número entre 1 e 100!";
    }

    private async void MakeGuess()
    {
        if (userGuess is <= 0 or > 100)
        {
            message = $"Você só pode dar palpites de números inteiros entre 1 e 100";
            return;
        }
        if (attempts >= maxAttempts)
        {
            message = $"Você já usou todas as suas {maxAttempts} tentativas. O número era {chosenNumber}.";
            return;
        }

        attempts++;

        if (userGuess == chosenNumber)
        {
            message = "Parabéns! Você acertou o número!";
            var timer = new Timer(8000);
            timer.Elapsed += (sender, e) =>
            {
                InvokeAsync(() =>
                {
                    StartNewGame();
                    StateHasChanged();
                });
                timer.Stop();
            };
            timer.Start();
        }
        else if (userGuess < chosenNumber)
        {
            message = $"O número escolhido é maior que {userGuess}.";
        }
        else
        {
            message = $"O número escolhido é menor que {userGuess}.";
        }

        if (attempts >= maxAttempts)
        {
            message += $" Você usou todas as suas tentativas. O número era {chosenNumber}.";
            var timer = new Timer(4000);
            timer.Elapsed += (sender, e) =>
            {
                InvokeAsync(() =>
                {
                    StartNewGame();
                    StateHasChanged();
                });
                timer.Stop();
            };
            timer.Start();
        }
    }

    private void ChangeDifficultLevel(ChangeEventArgs e)
    {
        if (Enum.TryParse<Level>(e.Value.ToString(), out var selectedLevel))
        {
            _level = selectedLevel;
            maxAttempts = _level switch
            {
                Level.MUITO_FACIL => 12,
                Level.FACIL => 9,
                Level.NORMAL => 7,
                Level.DIFICIL => 6,
                Level.PROFISSIONAL => 5,
                _ => maxAttempts
            };
            StartNewGame();
        }
    }

    private string GetAlertClass(string message)
    {
        if (message.Contains("Parabéns"))
        {
            return "alert-success";
        }
        else if (message.Contains("Tente"))
        {
            return "alert-primary";
        }
        else if (message.Contains("tentativas"))
        {
            return "alert-danger";
        }
        return "alert-warning";
    }

    public enum Level
    {
        MUITO_FACIL,
        FACIL,
        NORMAL,
        DIFICIL,
        PROFISSIONAL
    }
}