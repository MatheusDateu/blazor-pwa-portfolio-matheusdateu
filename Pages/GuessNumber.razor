@page "/guess-number"
@using System.Timers
@inject IJSRuntime JSRuntime

<style>
    .centered-container {
        height: 100vh;
    }
    p {
        margin: 0;
    }
    h3 {
        margin: 0;
    }
</style>

<div class="d-flex justify-content-center align-items-center">
    <div class="text-center">
        <h3>Jogo de Adivinhação de Números</h3>
        <p class="text-dark">Máximo de tentativas: <span class="text-success">@maxAttempts</span></p>

        <div class="d-flex flex-column">
            <select class="w-100 form-select" @onchange="ChangeDifficultLevel">
                @foreach (Level item in Enum.GetValues(typeof(Level)))
                {
                    <option value="@item">@item.ToString().Replace("_", " ")</option>
                }
            </select>
            <input @bind="userGuess" type="number" class="form-control my-2" placeholder="Digite seu palpite" min="0" max="100"/>
            <button class="btn btn-success w-100" @onclick="MakeGuess">ENVIAR PALPITE</button>
        </div>
        <p class="text-dark mt-1">Tentativas usadas: <span class="text-success">@attempts</span></p>
        
        @if (!string.IsNullOrEmpty(message))
        {
            if (message.Contains("número era"))
            {
                <p class="alert alert-danger">@message</p>
            } else if (message.Contains("acertou"))
            {
                <p class="alert alert-success">@message</p>
            }
            else if (message.Contains("1 e 100"))
            {
                <p class="alert alert-primary">@message</p>
            }
            else
            {
                <p class="alert alert-info">@message</p>
            }
        }
    </div>
</div>

@code {
    private int chosenNumber;
    private int attempts;
    private int maxAttempts = 12;
    private int userGuess;
    private string message = string.Empty;
    private Level _level;

    protected override void OnInitialized()
    {
        StartNewGame();
    }

    private void StartNewGame()
    {
        Task.Delay(3000);
        var random = new Random();
        chosenNumber = random.Next(1, 101); // Número aleatório entre 1 e 100
        attempts = 0;
        userGuess = 0;
        message = "Tente adivinhar o número entre 1 e 100!";
    }

    private async void MakeGuess()
    {
        if (attempts >= maxAttempts)
        {
            message = $"Você já usou todas as suas {maxAttempts} tentativas. O número era {chosenNumber}.";
            return;
        }

        attempts++;

        if (userGuess == chosenNumber)
        {
            message = "Parabéns! Você acertou o número!";
            var timer = new Timer(8000);
            timer.Elapsed += (sender, e) =>
            {
                InvokeAsync(() =>
                {
                    StartNewGame();
                    StateHasChanged();
                });
                timer.Stop();
            };
            timer.Start();
        }
        else if (userGuess < chosenNumber)
        {
            message = $"O número escolhido é maior que {userGuess}.";
        }
        else
        {
            message = $"O número escolhido é menor que {userGuess}.";
        }

        if (attempts >= maxAttempts)
        {
            message += $" Você usou todas as suas tentativas. O número era {chosenNumber}.";
// Você pode iniciar um novo jogo automaticamente após 3 segundos
            var timer = new Timer(8000);
            timer.Elapsed += (sender, e) =>
            {
                InvokeAsync(() =>
                {
                    StartNewGame();
                    StateHasChanged();
                });
                timer.Stop();
            };
            timer.Start();
        }
    }

    private void ChangeDifficultLevel(ChangeEventArgs e)
    {
        if (Enum.TryParse<Level>(e.Value.ToString(), out var selectedLevel))
        {
            _level = selectedLevel;
            maxAttempts = _level switch
            {
                Level.MUITO_FACIL => 12,
                Level.FACIL => 9,
                Level.NORMAL => 7,
                Level.DIFICIL => 6,
                Level.PROFISSIONAL => 5,
                _ => maxAttempts
            };
            StartNewGame();
        }
    }

    public enum Level
    {
        MUITO_FACIL,
        FACIL,
        NORMAL,
        DIFICIL,
        PROFISSIONAL
    }
}
