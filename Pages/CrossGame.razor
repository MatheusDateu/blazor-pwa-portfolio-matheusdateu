@page "/cross-game"
<h3 class="text-center text-primary text-uppercase fw-bold">Jogo da Velha</h3>

<div class="game-board">
    <div class="row">
        <button class="cell" @onclick="() => MakeMove(0, 0)">@board[0, 0]</button>
        <button class="cell" @onclick="() => MakeMove(0, 1)">@board[0, 1]</button>
        <button class="cell" @onclick="() => MakeMove(0, 2)">@board[0, 2]</button>
    </div>
    <div class="row">
        <button class="cell" @onclick="() => MakeMove(1, 0)">@board[1, 0]</button>
        <button class="cell" @onclick="() => MakeMove(1, 1)">@board[1, 1]</button>
        <button class="cell" @onclick="() => MakeMove(1, 2)">@board[1, 2]</button>
    </div>
    <div class="row">
        <button class="cell" @onclick="() => MakeMove(2, 0)">@board[2, 0]</button>
        <button class="cell" @onclick="() => MakeMove(2, 1)">@board[2, 1]</button>
        <button class="cell" @onclick="() => MakeMove(2, 2)">@board[2, 2]</button>
    </div>
</div>

@if (winner != null)
{
    <p class="text-center my-2">Vencedor: <span class="text-success bg-dark py-1 px-2">@winner</span> @if (winner.Equals("X"))
        {
            <span>ü•≥</span>
        }
        else
        {
            <span>üò¢</span>
        }</p>
}
else if (IsBoardFull())
{
    <p class="text-center">Empate! ü§ù</p>
}
<div class="w-100 text-center my-2">
    <button @onclick="ResetGame" class="btn btn-danger">Reiniciar Jogo</button>
</div>

<style>
    .game-board {
        display: grid;
        gap: 5px;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .row {
        display: flex;
        gap: 5px;
    }

    .cell {
        width: 75px;
        height: 75px;
        font-size: 24px;
        text-align: center;
        vertical-align: middle;
    }
</style>

@code {
    private string[,] board = new string[3, 3];
    private string currentPlayer = "X";
    private string winner = null;

    protected override void OnInitialized()
    {
        ResetGame();
    }

    private void ResetGame()
    {
        board = new string[3, 3];
        currentPlayer = "X";
        winner = null;
    }

    private void MakeMove(int row, int col)
    {
        if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row, col] != null || winner != null)
        {
            return; // Indices are out of bounds or cell already taken or game already won
        }

        board[row, col] = currentPlayer;
        if (CheckWinner())
        {
            winner = currentPlayer;
        }
        else if (IsBoardFull())
        {
            winner = "Empate";
        }
        else
        {
            currentPlayer = currentPlayer == "X" ? "O" : "X";
            if (currentPlayer == "O")
            {
                MakeAIMove();
            }
        }

        // For√ßar a atualiza√ß√£o da interface do usu√°rio
        StateHasChanged();
    }

    private void MakeAIMove()
    {
        // Simple AI to make a random move
        var emptyCells = new List<(int, int)>();
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (board[i, j] == null)
                {
                    emptyCells.Add((i, j));
                }
            }
        }

        if (emptyCells.Count > 0)
        {
            var random = new Random();
            var move = emptyCells[random.Next(emptyCells.Count)];
            board[move.Item1, move.Item2] = "O";

            if (CheckWinner())
            {
                winner = "O";
            }
            else if (IsBoardFull())
            {
                winner = "Empate";
            }
            else
            {
                currentPlayer = "X";
            }
        }

        // For√ßar a atualiza√ß√£o da interface do usu√°rio
        StateHasChanged();
    }

    private bool CheckWinner()
    {
        // Check rows and columns
        for (int i = 0; i < 3; i++)
        {
            if (board[i, 0] != null && board[i, 0] == board[i, 1] && board[i, 1] == board[i, 2])
                return true;
            if (board[0, i] != null && board[0, i] == board[1, i] && board[1, i] == board[2, i])
                return true;
        }

        // Check diagonals
        if (board[0, 0] != null && board[0, 0] == board[1, 1] && board[1, 1] == board[2, 2])
            return true;
        if (board[0, 2] != null && board[0, 2] == board[1, 1] && board[1, 1] == board[2, 0])
            return true;

        return false;
    }

    private bool IsBoardFull()
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (board[i, j] == null)
                {
                    return false;
                }
            }
        }
        return true;
    }
}
